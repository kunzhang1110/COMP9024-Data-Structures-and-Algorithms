/**
 * Assignment 2 for COMP9024 2017S1
 * @author Kun Zhang (z5086704)
 */

package net.datastructures;


import java.util.ArrayList;
import javax.swing.*;
import java.awt.*;

public class ExtendedAVLTree<K, V> extends AVLTree<K, V>{
	
	public static <K, V> AVLTree<K, V> clone(AVLTree<K,V> tree){
		
		AVLTree<K, V> newTree = new AVLTree<K, V>(); 		// create a new tree to be cloned
		newTree.numEntries = tree.numEntries;				// copy the size of tree to be cloned
		newTree.insert(tree.root.element().getKey(), tree.root.element().getValue()); // clone the root first
		cloneTree(newTree.root,tree.root);					// recursive cloning by node; start with root
		return newTree;
	}
	
	
	/*Q1*/
	public static<K,V> void cloneTree(BTPosition<Entry<K,V>> newNode, BTPosition<Entry<K,V>> oldNode){
        AVLNode<K,V> left = new AVLNode<K,V>(); // create left child node
        AVLNode<K,V> right = new AVLNode<K,V>(); // create right child node
        
        // link parent and children
        newNode.setLeft(left);
        left.setParent(newNode); 
        newNode.setRight(right); 
        right.setParent(newNode);
        
        // recursion: left 
        if (oldNode.getLeft().element() != null) { 
            left.setElement(oldNode.getLeft().element()); 
            cloneTree(left, oldNode.getLeft()); 
        }
        // recursion: right
        if (oldNode.getRight().element() != null) {
        	right.setElement(oldNode.getRight().element()); 
            cloneTree(right, oldNode.getRight()); 
        }   
	}
	
	/*Q2*/
	public static <K, V> AVLTree<K, V> merge(AVLTree<K,V> tree1, AVLTree<K,V> tree2 ){
        ArrayList<Position<Entry<K, V>>> treeList1 = new ArrayList<Position<Entry<K, V>>>();
        ArrayList<Position<Entry<K, V>>> treeList2 = new ArrayList<Position<Entry<K, V>>>();
		
        // sort values in each tree and put sorted values in ArrayLists
        sortTreeinList(tree1, tree1.root(), treeList1);
        sortTreeinList(tree2, tree2.root(), treeList2);
        
        ArrayList<Position<Entry<K, V>>> listMerged = mergeList(treeList1,treeList2);
        AVLTree<K, V> treeMerged = new AVLTree<K, V>();
        treeMerged.root = convertListtoTree(treeMerged, null, listMerged, 0, listMerged.size()-1); 
        treeMerged.numEntries = tree1.numEntries + tree2.numEntries;	//	
        return treeMerged;
	}
	
	/* Retrive values of a tree and store them in an ArrayList
	 * In-order Traversal of the tree: sorted order small to large in the ArrayList
	 * */
	public static <K,V> void sortTreeinList(AVLTree<K,V> tree, Position<Entry<K, V>> node, ArrayList<Position<Entry<K, V>>> arrayList){
		if(tree.hasLeft(node)){
			sortTreeinList(tree, tree.left(node), arrayList);
		}
		
        if(node.element() != null){
        	arrayList.add(node);
        }
        
        if(tree.hasRight(node)){
        	sortTreeinList(tree, tree.right(node), arrayList);
        }			
	}
	

	public static <K, V> ArrayList<Position<Entry<K, V>>> mergeList(ArrayList<Position<Entry<K, V>>> list1, ArrayList<Position<Entry<K, V>>> list2){
		ArrayList<Position<Entry<K, V>>> mergedList = new ArrayList<Position<Entry<K, V>>>();	
	    
		int i = 0;	// index for list1
		int j = 0;	// index for list2
		
		while (i<list1.size() && j <list2.size()){
			Position<Entry<K, V>> node1 = list1.get(i);
			Position<Entry<K, V>> node2 = list2.get(j);
			int key1 = Integer.parseInt(node1.element().getKey().toString());
			int key2 = Integer.parseInt(node2.element().getKey().toString());			
			
			if (node1.element() == null){	//if null value, skip
				i++;
				continue;
			}			
			
			if (node2.element() == null){	//if null value, skip
				j++;
				continue;
			}			
			
			if (key1<=key2){	// compare a pair of value in lists put the smaller in mergedList
				mergedList.add(node1);
				i++;
			}else{
				mergedList.add(node2);		
				j++;
			}	
		}
		
		if(i<list1.size()){
			while(i<list1.size()){
				mergedList.add(list2.get(i));
				i++;
			}
		}
		
		if(j<list2.size()){
			while(j<list2.size()){
			mergedList.add(list2.get(j));
			j++;
			}
		}
		return mergedList;
	}
	
	public static<K, V> AVLNode convertListtoTree(AVLTree<K, V> tree, AVLNode<K, V> parent, ArrayList<Position<Entry<K, V>>> list, int start, int end){
		if(start > end){
			return null;
		}

        int mid = (start + end)/2;

        AVLNode newNode = (AVLNode) tree.createNode(list.get(mid).element(), parent, null, null);

        int height = (int)Math.ceil(Math.log(end+1)/Math.log(2));
        newNode.setHeight(height);

        newNode.setLeft(convertListtoTree(tree, (AVLNode)newNode, list, start, mid-1));
        newNode.setRight(convertListtoTree(tree, (AVLNode)newNode, list, mid+1, end));
        return newNode;
        }

/* Q3*/
	public static <K, V> void print(AVLTree<K, V> tree){
        JFrame frame = new JFrame();
        int height = 2000;
        int width = 1000;
        frame.setSize(height, width);	//height and width
        frame.setTitle("Tree Graph");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        printSubTree(tree.root, frame, height/2, 0, width/2, 0);	
		
	}
		
	private static <K, V> void printSubTree(BTPosition<Entry<K,V>> position, JFrame frame, int x, int y, int separation, int height) {
        int circle_depth = 50 - height*3;
        int rectangle_width = 30 - height*2;
        int rectangle_height = 30 - height*2;
        
        // Draw left subtree, where if its left child is an external/leaf node, then draw a rectangle
        if (position.getLeft() != null && position.getLeft().element() != null) { // logical AND: if position's left child is not null, and if that left child's element is also not null
            printSubTree(position.getLeft(), frame, x - separation/2, y + 100, separation/2, height + 1);  // recurse on left child
        } else { // else, add rectangle
            frame.getContentPane().add(new Rectangle(x - separation/2, y + 100, rectangle_width, rectangle_height));
            frame.setVisible(true);
        }
        
        // Draw right subtree, where if its right child is an external/leaf node, then draw a rectangle
        if (position.getRight() != null && position.getRight().element() != null) { // logical AND: if position's right child is not null, and if that right child's element is also not null
            printSubTree(position.getRight(), frame, x + separation/2, y + 100, separation/2, height + 1); // recurse on right child
        } else { // else, add rectangle
            frame.getContentPane().add(new Rectangle(x + separation/2, y + 100, rectangle_width, rectangle_height));
            frame.setVisible(true);
        }
        
        // Drawing current nodes
        
        // Draw internal node as a circle
        frame.getContentPane().add(new Circle(x, y, circle_depth));
        frame.setVisible(true);
        // Put key in circle
        frame.getContentPane().add(new Text(position.element().getKey().toString(), x - height, y + circle_depth/2));
        frame.setVisible(true);
        // Draw left leg
        frame.getContentPane().add(new Line(x, y + circle_depth, x - separation/2, y + 100));
        frame.setVisible(true);
        // Draw right leg
        frame.getContentPane().add(new Line(x, y + circle_depth, x + separation/2, y + 100));
        frame.setVisible(true);
        }
	
	   protected static class Circle extends JComponent {
	        /**
	         * 
	         */
	        private static final long serialVersionUID = -285245281689614327L;
	        int x = 0;
	        int y = 0;
	        int w = 0;
	        int h = 0;
	        
	        Circle(int x, int y, int d) {
	            this.x = x-d/2; // change (x, y) to the top of the circle
	            this.y = y;
	            this.w = d;
	            this.h = d;
	        }
	        
	        @Override
	        protected void paintComponent(Graphics g) {
	            g.drawOval(x, y, w, h);
	        }
	    }

	    // Drawing rectangles for external/leaf nodes
	    protected static class Rectangle extends JComponent {
	        /**
	         * 
	         */
	        private static final long serialVersionUID = 5313538215998587004L;
	        int x = 0;
	        int y = 0;
	        int w = 0;
	        int h = 0;
	        
	        Rectangle(int x, int y, int w, int h) {
	            this.x = x-w/2; // change (x, y) to the top of the rectangle
	            this.y = y;
	            this.w = w;
	            this.h = h;
	        }
	        
	        @Override
	        protected void paintComponent(Graphics g) {
	            g.drawRect(x, y, w, h);
	        }
	    }
	    
	    // Drawing connecting lines
	    protected static class Line extends JComponent {
	        /**
	         * 
	         */
	        private static final long serialVersionUID = 557134623293999792L;
	        int x1 = 0;
	        int y1 = 0;
	        int x2 = 0;
	        int y2 = 0;
	        
	        Line(int x1, int y1, int x2, int y2) {
	            this.x1 = x1;
	            this.y1 = y1;
	            this.x2 = x2;
	            this.y2 = y2;
	        }
	        
	        @Override
	        protected void paintComponent(Graphics g) {
	            g.drawLine(x1, y1, x2, y2);
	        }
	    }

	    // Drawing text for numbers within nodes
	    protected static class Text extends JComponent {
	        /**
	         * 
	         */
	        private static final long serialVersionUID = 8667260237684528313L;
	        String s;
	        int x = 0;
	        int y = 0;
	        
	        Text(String s, int x, int y) {
	            this.s = s;
	            this.x = x;
	            this.y = y;
	        }
	        
	        @Override
	        protected void paintComponent(Graphics g) {
	            g.drawString(s, x, y);
	        }
	    }

	    
	    /* Main Method*/
	    public static void main(String[] args)
        { 
          String values1[]={"Sydney", "Beijing","Shanghai", "New York", "Tokyo", "Berlin",
         "Athens", "Paris", "London", "Cairo"}; 
          int keys1[]={20, 8, 5, 30, 22, 40, 12, 10, 3, 5};
          String values2[]={"Fox", "Lion", "Dog", "Sheep", "Rabbit", "Fish"}; 
          int keys2[]={40, 7, 5, 32, 20, 30};
             
          /* Create the first AVL tree with an external node as the root and the
         default comparator */ 
             
            AVLTree<Integer, String> tree1=new AVLTree<Integer, String>();
  
          // Insert 10 nodes into the first tree
             
            for ( int i=0; i<10; i++)
                tree1.insert(keys1[i], values1[i]);
           
          /* Create the second AVL tree with an external node as the root and the
         default comparator */
             
            AVLTree<Integer, String> tree2=new AVLTree<Integer, String>();
           
          // Insert 6 nodes into the tree
             
            for ( int i=0; i<6; i++)
                tree2.insert(keys2[i], values2[i]);
             
            ExtendedAVLTree.print(tree1);
            ExtendedAVLTree.print(tree2); 
            ExtendedAVLTree.print(ExtendedAVLTree.clone(tree1));
            ExtendedAVLTree.print(ExtendedAVLTree.clone(tree2));
            
            ExtendedAVLTree.print(ExtendedAVLTree.merge(ExtendedAVLTree.clone(tree1), 
            ExtendedAVLTree.clone(tree2)));
          }





}
