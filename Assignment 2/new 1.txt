	/* Test Method*/
	private static<K,V> void preOrderPrint(AVLTree<K, V> tree, Position<Entry<K, V>> node){
	    if(node.element() != null){
	        System.out.print(node.element().getKey()+"   "+node.element().getValue()+"  "+tree.height(node)+"  "+tree.hasLeft(node)+"  "+tree.hasRight(node));
	        System.out.println(" ");
	    }
	
	    if(tree.isInternal(node) && tree.hasLeft(node))
	        preOrderPrint(tree, tree.left(node));
	
	    if(tree.isInternal(node) && tree.hasRight(node)){
	        preOrderPrint(tree, tree.right(node));
	    }
	}













	/* Main Method*/
	public static void main(String[] args)
	{ 
	  String values1[]={"Sydney", "Beijing","Shanghai", "New York", "Tokyo", "Berlin",
	 "Athens", "Paris", "London", "Cairo"}; 
	  int keys1[]={20, 8, 5, 30, 22, 40, 12, 10, 3, 5};
	  String values2[]={"Fox", "Lion", "Dog", "Sheep", "Rabbit", "Fish"}; 
	  int keys2[]={40, 7, 5, 32, 20, 30};
	     
	  /* Create the first AVL tree with an external node as the root and the
	 default comparator */ 
	     
	    AVLTree<Integer, String> tree1=new AVLTree<Integer, String>();
	
	  // Insert 10 nodes into the first tree
	     
	    for ( int i=0; i<10; i++)
	        tree1.insert(keys1[i], values1[i]);
	   
	  /* Create the second AVL tree with an external node as the root and the
	 default comparator */
	     
	    AVLTree<Integer, String> tree2=new AVLTree<Integer, String>();
	   
	  // Insert 6 nodes into the tree
	     
	    for ( int i=0; i<6; i++)
	        tree2.insert(keys2[i], values2[i]);
	     
	    ExtendedAVLTree.preOrderPrint(tree1,tree1.root());
	    System.out.println("-------------------------");
	    ExtendedAVLTree.preOrderPrint(tree2,tree2.root()); 
	    
	  //  ExtendedAVLTree.preOrderPrint(ExtendedAVLTree.clone(tree1));
	  //  ExtendedAVLTree.preOrderPrint(ExtendedAVLTree.clone(tree2));
	    System.out.println("-------------------------");
	    AVLTree<Integer, String> testTree=new AVLTree<Integer, String>();
	    testTree = ExtendedAVLTree.merge(tree1,tree2);
	    ExtendedAVLTree.preOrderPrint(testTree,testTree.root()); 
	  //  ExtendedAVLTree.preOrderPrint(ExtendedAVLTree.merge(ExtendedAVLTree.clone(tree1), 
	  //  ExtendedAVLTree.clone(tree2)));
	    
	    
	  }
